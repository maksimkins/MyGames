@model IEnumerable<Comment>;
@{
    ViewData["Title"] = "Comments";
    var gameId = ViewBag.gameId;
    Int32.TryParse(base.User.Claims.Where(c => c.Type == "id").FirstOrDefault()?.Value, out int userId);
}

<script>
  function DeleteComment(commentJson) {

    let comment = JSON.parse(commentJson);

    fetch(`/api/Comment/${comment.Id}`, {
      method: 'DELETE',
      headers: {
        'Content-type': 'application/json; charset=UTF-8'
      }
    }).then((response) => {
            if (!response.ok)
                throw new Error(response.statusText);

            let card = document.getElementById(`comment ${comment.Id}`);
            let parent = card.parentNode;
            if (parent) 
            {
              parent.removeChild(card);
              

              if(parent.children.length === 0)
              {
                let warning = document.createElement("div");
                warning.classList.add("alert");
                warning.classList.add("alert-danger");
                warning.setAttribute('role',"alert");
                let warningText = document.createTextNode("Sorry! There is no comments for this game(");
                warning.appendChild(warningText)

                parent.appendChild(warning)
              }
              
            }

        }).catch((err) => {
          console.log(err.message);
        });
  }


  function PutComment(formId) {

    let form = document.getElementById(formId);
    
    let data = new FormData(form);

    let comment = {};
    for (var [key, value] of data) {
      comment[`${key}`] = value;
    }

    let commentJson = JSON.stringify(comment);

      fetch(`/api/Comment/${comment.Id}`, {
      method: 'PUT',
      body: commentJson,
      headers: {
        'Content-type': 'application/json; charset=UTF-8'
      }
    }).then((response) => {
            if (!response.ok)
                throw new Error(response.statusText);
            let card = document.getElementById(`comment ${comment.Id}`);
            let title = card.querySelector('.card-title');
            let text = card.querySelector('.card-text');

            title.innerHTML = `${comment.Title}`;
            text.innerHTML = `${comment.Text}`;

        }).catch((err) => {
          console.log(err.message);
        });
  }

  function PostComment(formId) {

    let form = document.getElementById(formId);

    let data = new FormData(form);
    let comment = {};
    for (var [key, value] of data) {
      comment[`${key}`] = value;
    }

    comment[`UserId`] = @userId;

    let commentJson = JSON.stringify(comment);

      fetch("/api/Comment", {
      method: 'POST',
      body: commentJson,
      headers: {
        'Content-type': 'application/json; charset=UTF-8'
      }
    }).then((response) => {
            if (!response.ok)
                throw new Error(response.statusText);

            location.reload();

        }).catch((err) => {
          console.log(err.message);
        });
  }

</script>

<div class="comments-container">
   <div class="comments d-flex flex-wrap justify-content-between">
        @if(Model is null || !Model.Any()){
            <div class="alert alert-danger" role="alert">
                Sorry! There is no comments for this game(
            </div>
        }
        else {
            <div id="comments-wrapper" class="comments d-flex flex-wrap justify-content-between mb-3">
                @foreach(var comment in Model) {
                <div class="card" id="comment @comment.Id" style="width: 18rem;">
                  <div class="card-body">
                    <h4 class="card-title">@comment.User?.Username</h4>
                    <h5 class="card-title">@comment.Title</h5>
                    <li class="card-text list-group-item mb-2">@comment.Text</li>

                    
                     @if((base.User.Identity?.IsAuthenticated ?? false) && (userId == comment.UserId))
                     {

                      <button type="button" onclick="DeleteComment(`@JsonSerializer.Serialize(comment)`)" class="btn btn-danger">Delete comment</button>
                    
                      <div class="dropdown">
                      <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                       Change Comment
                      </button>
                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                        <li>

                        <form onsubmit="return false;" id="form-@comment.Id">
                          <legend>Change the comment</legend>
                            <div class="mb-3">
                              <label hidden for="disabledTextInput" class="form-label">GameId</label>
                              <input hidden id="game-id" name="GameId" type="number" value="@(gameId is null ? "error" : (int)gameId)">
                            </div>

                            <div class="mb-3">
                              <label hidden for="disabledTextInput" class="form-label">UserId</label>
                              <input hidden id="user-id" name="UserId" type="number" value="@comment.UserId">
                            </div>

                            <div class="mb-3">
                              <label hidden for="disabledTextInput" class="form-label">comment.Id</label>
                              <input hidden id="comment-id" name="Id" type="number" value="@(comment.Id is null ? "error" : (int)comment.Id)">
                            </div>

                        <div class="mb-3">
                          <label for="exampleInputEmail1" class="form-label">Title</label>
                          <input id="title" name="Title" type="text" class="form-control">
                        </div>

                        <div class="mb-3">
                          <label for="exampleInputPassword1" class="form-label">Text</label>
                          <input id="text" name="Text" type="text" class="form-control">
                        </div>

                        <button onclick="PutComment(`form-@comment.Id`)" type="submit" class="btn btn-primary">Change comment</button>
                      </form>

                        </li>
                     </ul>
                     </div>
                     }
                     
                    
                  </div>
                </div>
                 }
            </div>  

        }

        
   @if(base.User.Identity?.IsAuthenticated ?? false)
   {
      <div>
            <form id="comment-post-form" onsubmit="return false;">
                <legend>Write a new comment!!</legend>
                  <div class="mb-3">
                    <label hidden for="disabledTextInput" class="form-label">GameId</label>
                    <input hidden name="GameId" type="text" value="@(gameId is null ? "error" : (int)gameId)">
                  </div>

              <div class="mb-3">
                <label for="exampleInputEmail1" class="form-label">Title</label>
                <input name="Title" type="text" class="form-control">
              </div>

              <div class="mb-3">
                <label for="exampleInputPassword1" class="form-label">Text</label>
                <input name="Text" type="text" class="form-control">
              </div>

              <button onclick="PostComment(`comment-post-form`)" type="submit" class="btn btn-primary">Submit comment</button>
            </form>
        </div>
   }
   else {
      <div>Sorry, yo can't write a comments untill youre not loggined <a asp-route="LoginView">click here to login</a></div>
   }
        