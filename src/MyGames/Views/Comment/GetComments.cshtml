@model IEnumerable<Comment>;
@inject UserManager<User> userManager;
@{
    ViewData["Title"] = "Comments";

    var IsAuthenticated = base.User.Identity?.IsAuthenticated ?? false;
    var isDeveloper = base.User.Claims.Where(c => c.Type == ClaimTypes.Role).FirstOrDefault()?.Value == "Developer";
    var userName =  User.FindFirstValue(ClaimTypes.Name);
    User? user = IsAuthenticated ? await userManager.FindByNameAsync(userName!) : null;
    var userId = user?.Id;

    var gameId = ViewBag.gameId;
}

<script>
  function DeleteComment(commentJson) {

    let comment = JSON.parse(commentJson);

    fetch(`/api/Comment/${comment.Id}`, {
      method: 'DELETE',
      headers: {
        'Content-type': 'application/json; charset=UTF-8'
      }
    }).then((response) => {
            if (!response.ok)
                throw new Error(response.statusText);

            let card = document.getElementById(`comment ${comment.Id}`);
            let parent = card.parentNode;
            if (parent) 
            {
              parent.removeChild(card);
              

              if(parent.children.length === 0)
              {
                let warning = document.createElement("div");
                warning.classList.add("alert");
                warning.classList.add("alert-danger");
                warning.setAttribute('role',"alert");
                let warningText = document.createTextNode("Sorry! There is no comments for this game(");
                warning.appendChild(warningText)

                parent.appendChild(warning)
              }
              
            }

        }).catch((err) => {
          console.log(err.message);
        });
  }


  function PutComment(formId) {

    let form = document.getElementById(formId);
    
    let data = new FormData(form);

    let comment = {};
    for (var [key, value] of data) {
      comment[`${key}`] = value;
    }

    let commentJson = JSON.stringify(comment);

      fetch(`/api/Comment/${comment.Id}`, {
      method: 'PUT',
      body: commentJson,
      headers: {
        'Content-type': 'application/json; charset=UTF-8'
      }
    }).then((response) => {
            if (!response.ok)
                throw new Error(response.statusText);
            let card = document.getElementById(`comment ${comment.Id}`);
            let title = card.querySelector('.card-title');
            let text = card.querySelector('.card-text');

            title.innerHTML = `${comment.Title}`;
            text.innerHTML = `${comment.Text}`;

        }).catch((err) => {
          console.log(err.message);
        });
  }

  function PostComment(formId) {

    let form = document.getElementById(formId);

    let data = new FormData(form);
    let comment = {};
    for (var [key, value] of data) {
      comment[`${key}`] = value;
    }

    comment[`UserId`] = @userId;

    let commentJson = JSON.stringify(comment);

      fetch("/api/Comment", {
      method: 'POST',
      body: commentJson,
      headers: {
        'Content-type': 'application/json; charset=UTF-8'
      }
    }).then((response) => {
            if (!response.ok)
                throw new Error(response.statusText);

            location.reload();

        }).catch((err) => {
          console.log(err.message);
        });
  }
</script>


<style>
  .comment-section {  
    background-color: #333; /* Dark gray background */  
    padding: 20px;  
    width: 60%;
    border-radius: 10px;  
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);  
    margin-left: 90px;
  }  
 .comment-header {  
    color: #fff; /* White text */  
    font-size: 18px;  
    margin-bottom: 10px;  
  }  
 .comment-input {  
    width: 50%;  
    height: 100px;  
    padding: 10px;  
    font-size: 16px;  
    border: none;  
    border-radius: 10px;  
    background-color: #444; /* Dark gray background */  
    color: #fff; /* White text */  
  }  
 .comment-submit {  
    background-color: #666; /* Dark gray background */  
    color: #fff; /* White text */  
    padding: 10px 20px;  
    border: none;  
    border-radius: 10px;  
    cursor: pointer;  
  }  
 .comment-submit:hover {  
    background-color: #777; /* Darker gray background on hover */  
  }  
 .comment-list {  
    margin-top: 20px;  
  }  

  .comments-container{
    margin-left: 30px;
  }

  .comments-container.active {
    background-color: white;

    color: black;
  }
  .comments-container {
    background-color: #151515;

    color: white;
  }
</style>


<div class="comments-container">
   <div class="comments">
        @if(Model is null || !Model.Any()){
            <div class="alert alert-danger" role="alert">
                Sorry! There is no comments for this game(
            </div>
        }
        else {
            <div id="comments-wrapper" class="comments d-flex flex-wrap justify-content-between mb-3">
                @foreach(var comment in Model) {



                <div class="card" id="comment @comment.Id" style="width: 18rem;">
                  <div class="card-body">
                    <h4 class="card-title">@comment?.User?.UserName</h4>
                    <li class="card-text list-group-item mb-2">@comment?.Text</li>

                    
                     @if((base.User.Identity?.IsAuthenticated ?? false) && (userId == comment.UserId))
                     {

                      <button type="button" onclick="DeleteComment(`@JsonSerializer.Serialize(comment)`)" class="btn btn-danger">Delete comment</button>
                    
                      <div class="dropdown">
                      <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
                       Change Comment
                      </button>
                        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                        <li>

                        <form onsubmit="return false;" id="form-@comment.Id">
                          <legend>Change the comment</legend>
                            <div class="mb-3">
                              <label hidden for="disabledTextInput" class="form-label">GameId</label>
                              <input hidden id="game-id" name="GameId" type="number" value="@(gameId is null ? "error" : (int)gameId)">
                            </div>

                            <div class="mb-3">
                              <label hidden for="disabledTextInput" class="form-label">UserId</label>
                              <input hidden id="user-id" name="UserId" type="number" value="@comment.UserId">
                            </div>

                            <div class="mb-3">
                              <label hidden for="disabledTextInput" class="form-label">comment.Id</label>
                              <input hidden id="comment-id" name="Id" type="number" value="@(comment.Id is null ? "error" : (int)comment.Id)">
                            </div>

                        <div class="mb-3">
                          <label for="exampleInputPassword1" class="form-label">Text</label>
                          <input id="text" name="Text" type="text" class="form-control">
                        </div>

                        <button onclick="PutComment(`form-@comment.Id`)" type="submit" class="btn btn-primary">Change comment</button>
                      </form>

                        </li>
                     </ul>
                     </div>
                     }
                     
                    
                  </div>
                </div>
                 }
            </div>  

        }

        
   @if(base.User.Identity?.IsAuthenticated ?? false)
   {

    <div class="comment-section">  
      <h2 class="comment-header">Leave a Comment</h2>  
      <form id="comment-post-form" onsubmit="return false;">  
        <label hidden for="disabledTextInput" class="form-label">GameId</label>
        <input hidden name="GameId" type="text" value="@(gameId is null ? "error" : (int)gameId)">

        <textarea placeholder="Write your comment here..." name="Text" class="comment-input"></textarea>  

        <button onclick="PostComment(`comment-post-form`)"  class="comment-submit">Submit</button>  
      </form>  
     
    </div> 


  
   }
   else {
      <div>Sorry, yo can't write a comments untill youre not loggined <a asp-route="LoginView" asp-route-ReturnUrl="@Context.Request.Path">click here to login</a></div>
   }
        